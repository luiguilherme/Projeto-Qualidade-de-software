window.consoleAPI = {}

window.LightningUtil = ({
	allowAPI: function(allowedAPI){
		consoleAPI = allowedAPI;
	},

	openTab: function(recordId){ /////// adicionar parametro de callback
		if(consoleAPI.workspace){
	        consoleAPI.workspace.openTab({
	            pageReference: {
	                "type": "standard__recordPage",
	                "attributes": {
	                    "recordId": recordId,
	                    "actionName":"view"
	                },
	                "state": {}
	            },
	            focus: true
	        });
		} else {
			console.log('LightningUtil Exception: Workspace API access not granted. Please initialize it.');
		}
	},

	openSubtab: function(workspace, tabUrl){ /////// adicionar parametro de callback
		workspace.getFocusedTabInfo().then(function(response) {
			workspace.openSubtab({
                parentTabId: response.tabId,
                url: tabUrl,
	        	focus: true
	        });
	    });
	},

	refreshFocusedTab: function(){
		if(consoleAPI.workspace){
	        consoleAPI.workspace.getFocusedTabInfo().then(function(response) {
	            consoleAPI.workspace.refreshTab({
	                      tabId: response.tabId,
	                      includeAllSubtabs: true
	             });
	        });
		} else {
			console.log('LightningUtil Exception: Workspace API access not granted. Please initialize it.');
		}
	},

	fireNotification: function(title, message, type, duration){
		var notification = $A.get("e.force:showToast");

		if(message.includes('FIELD_CUSTOM_VALIDATION_EXCEPTION,')){
			let lstError = message.split('FIELD_CUSTOM_VALIDATION_EXCEPTION,');
			message = lstError[1];
			if(message.includes(': []')){
				message =  message.split(': []')[0];
			}
		}

	    notification.setParams({
	    	type: type,
	    	title: title,
	        mode: 'dismissible',
	        duration: duration ? duration : 10,
	        message: message
	    });
	    notification.fire();
	},

    callApex: function(method, params, callback) {
    	if(consoleAPI.component){
	        let apexCall = consoleAPI.component.get('c.' + method);
	        apexCall.setParams(params);
	        apexCall.setCallback(this, (response) => {
	            var state = response.getState();
	            if (state === "SUCCESS") {
	                callback(response.getReturnValue());
	            };
	        });

	        $A.enqueueAction(apexCall);
		} else {
			debugger;
			console.log('LightningUtil Exception: Component access not granted. Please initialize it.');
		}
	},

	callApex: function(component, method, params, callback) {
		if(component){
	        let apexCall = component.get('c.' + method);
            
            if(params != null){
				apexCall.setParams(params);
			}	
	        apexCall.setCallback(this, (response) => {				
				var state = response.getState();
			
				if (state != "SUCCESS") {
					let errors = response.getError();
					let mensagem;
					let type = 'error';
                    let title = 'Erro na consulta';
                    
					if (errors) {
						if (errors[0] && errors[0].message) {
							mensagem = errors[0].message;
						}
                    }
                    		
					if(mensagem == null){
						mensagem = 'Erro na consulta';
					}
                    					
					this.fireNotification(title, mensagem, type, 20);
				};
				
				callback(response.getReturnValue());
			});
	        $A.enqueueAction(apexCall);
		} else {
			console.log('LightningUtil Exception: Component access not granted. Please initialize it.');
		}
    },

	hideUtilityComponent: function(componentName){
		if(consoleAPI.utilityBar){
			consoleAPI.utilityBar.getAllUtilityInfo().then((utilities) => {
				utilities.forEach((utility) => {
					if(utility.utilityLabel == componentName){
						consoleAPI.utilityBar.setUtilityLabel({
							utilityId: utility.id,
							label: null,
							utilityVisible: false
						});
					}
				});
			});
		} else{
			console.log('LightningUtil Exception: Utility API access not granted. Please initialize it.');
		}
	},

	endecode : function(text, key, encode) {
		// endecode: function to encode or decode a text using a key.
		// Arguments: text to encode or decode; key to help with encryption or decryption; and, encode indicates that it should encode (true) or decode (false)
		let result = "";
		
		try {
			let charCode = 0;
			let textIndex = 0;
			let keyIndex = 0;
			
			for (textIndex = 0; textIndex < text.length; textIndex++) {
				if (encode) {
					charCode = (text.charCodeAt(textIndex) + key.charCodeAt(keyIndex));
					charCode = ((charCode > 255) ? charCode - 256 : charCode);

				} else {
					charCode = (text.charCodeAt(textIndex) - key.charCodeAt(keyIndex));
					charCode = ((charCode < 0) ? charCode + 256 : charCode);
				}

				keyIndex = ((keyIndex == (key.length - 1)) ? 0 : keyIndex + 1);

				result += String.fromCharCode(charCode);
			}

		} catch (error) {

		}
		
		return result;
	},

    storageTypes : {
		session: "sessionStorage",
		local: "localStorage",
		types: ["sessionStorage", "localStorage"],

		resolveType : function(type) {
			let storageType = this.session;

			if (type && this.types.includes(type)) {
				storageType = type;
			}

			return storageType;
		}
	},

	setItemSessionStorage : function(itemSession, text, encodeKey) {
        this.setItemStorage(this.storageTypes.session, itemSession, text, encodeKey);
	},

	getItemSessionStorage : function(itemSession, decodeKey) {
        return this.getItemStorage(this.storageTypes.session, itemSession, decodeKey);
	},

	removeItemSessionStorage : function(itemSession) {
        this.removeItemStorage(this.storageTypes.session, itemSession);
	},

	setItemLocalStorage : function(itemLocal, text, encodeKey) {
        this.setItemStorage(this.storageTypes.local, itemLocal, text, encodeKey);
	},

	getItemLocalStorage : function(itemLocal, decodeKey) {
        return this.getItemStorage(this.storageTypes.local, itemLocal, decodeKey);
	},

	removeItemLocalStorage : function(itemLocal) {
        this.removeItemStorage(this.storageTypes.local, itemLocal);
	},

	setItemStorage : function(storageType, itemStorage, text, encodeKey) {
        storageType = this.storageTypes.resolveType(storageType);

		if (itemStorage && text) {
			let textStorage = text;

			if (encodeKey) {
				let dateStorage = (new Date().toLocaleDateString());

				textStorage = this.endecode(text, (encodeKey + dateStorage), true);
			}

			window[storageType].setItem(itemStorage, textStorage);
		}
	},

	getItemStorage : function(storageType, itemStorage, decodeKey) {
		let text = "";

        storageType = this.storageTypes.resolveType(storageType);

		if (itemStorage) {
			let textStorage = window[storageType].getItem(itemStorage);

			if (textStorage) {
				if (decodeKey) {
					let dateStorage = (new Date().toLocaleDateString());

					text = this.endecode(textStorage, (decodeKey + dateStorage), false);

				} else {
					text = textStorage;
				}
			}
		}

		return text;
	},

	removeItemStorage : function(storageType, itemStorage) {
        storageType = this.storageTypes.resolveType(storageType);

		if (itemStorage) {
			if (itemStorage.includes(";")) {
				let ltItemStorage = itemStorage.split(";");

				for (let item in ltItemStorage) {
					if (ltItemStorage[item]) {
						window[storageType].removeItem(ltItemStorage[item]);
					}
				}

			} else {
				window[storageType].removeItem(itemStorage);
			}
		}
	},

})