window.consoleAPI = {}

window.LightningUtil = ({
	allowAPI: function(allowedAPI){
		consoleAPI = allowedAPI;
	},

	openTab: function(recordId){ /////// adicionar parametro de callback
		if(consoleAPI.workspace){
	        consoleAPI.workspace.openTab({
	            pageReference: {
	                "type": "standard__recordPage",
	                "attributes": {
	                    "recordId": recordId,
	                    "actionName":"view"
	                },
	                "state": {}
	            },
	            focus: true
	        });
		} else {
			console.log('LightningUtil Exception: Workspace API access not granted. Please initialize it.');
		}
	},

	openSubtab: function(workspace, tabUrl){ /////// adicionar parametro de callback
		workspace.getFocusedTabInfo().then(function(response) {
			workspace.openSubtab({
                parentTabId: response.tabId,
                url: tabUrl,
	        	focus: true
	        });
	    });
	},

	refreshFocusedTab: function(){
		if(consoleAPI.workspace){
	        consoleAPI.workspace.getFocusedTabInfo().then(function(response) {
	            consoleAPI.workspace.refreshTab({
	                      tabId: response.tabId,
	                      includeAllSubtabs: true
	             });
	        });
		} else {
			console.log('LightningUtil Exception: Workspace API access not granted. Please initialize it.');
		}
	},

	fireNotification: function(title, message, type, duration){
		var notification = $A.get("e.force:showToast");

		if(message.includes('FIELD_CUSTOM_VALIDATION_EXCEPTION,')){
			let lstError = message.split('FIELD_CUSTOM_VALIDATION_EXCEPTION,');
			message = lstError[1];
			if(message.includes(': []')){
				message =  message.split(': []')[0];
			}
		}

	    notification.setParams({
	    	type: type,
	    	title: title,
	        mode: 'dismissible',
	        duration: duration ? duration : 10,
	        message: message
	    });
	    notification.fire();
	},

    callApex: function(method, params, callback) {
    	if(consoleAPI.component){
	        let apexCall = consoleAPI.component.get('c.' + method);
	        apexCall.setParams(params);
	        apexCall.setCallback(this, (response) => {
	            var state = response.getState();
	            if (state === "SUCCESS") {
	                callback(response.getReturnValue());
	            };
	        });

	        $A.enqueueAction(apexCall);
		} else {
			debugger;
			console.log('LightningUtil Exception: Component access not granted. Please initialize it.');
		}
	},

	callApex: function(component, method, params, callback) {
		if(component){
	        let apexCall = component.get('c.' + method);
            
            if(params != null){
				apexCall.setParams(params);
			}	
	        apexCall.setCallback(this, (response) => {				
				var state = response.getState();
			
				if (state != "SUCCESS") {
					let errors = response.getError();
					let mensagem;
					let type = 'error';
                    let title = 'Erro na consulta';
                    
					if (errors) {
						if (errors[0] && errors[0].message) {
							mensagem = errors[0].message;
						}
                    }
                    		
					if(mensagem == null){
						mensagem = 'Erro na consulta';
					}
                    					
					this.fireNotification(title, mensagem, type, 20);
				};
				
				callback(response.getReturnValue());
			});
	        $A.enqueueAction(apexCall);
		} else {
			console.log('LightningUtil Exception: Component access not granted. Please initialize it.');
		}
    },

	hideUtilityComponent: function(componentName){
		if(consoleAPI.utilityBar){
			consoleAPI.utilityBar.getAllUtilityInfo().then((utilities) => {
				utilities.forEach((utility) => {
					if(utility.utilityLabel == componentName){
						consoleAPI.utilityBar.setUtilityLabel({
							utilityId: utility.id,
							label: null,
							utilityVisible: false
						});
					}
				});
			});
		} else{
			console.log('LightningUtil Exception: Utility API access not granted. Please initialize it.');
		}
	}
})