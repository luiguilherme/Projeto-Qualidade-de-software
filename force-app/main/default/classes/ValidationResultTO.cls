//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class ValidationResultTO {

	public class GeographicLocationUncertain {
		public String uncertain {get;set;} 
		public GeoJson geoJson {get;set;} 

		public GeographicLocationUncertain(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'uncertain') {
							uncertain = parser.getText();
						} else if (text == 'geoJson') {
							geoJson = new GeoJson(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GeographicLocationUncertain consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class ComplementSummaryCustom {
		public List<ComplementCustom> complement {get;set;} 

		public ComplementSummaryCustom(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'complement') {
							complement = arrayOfComplementCustom(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ComplementSummaryCustom consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class AliasedGeographicAddressWithoutPostcode {
		public String id {get;set;} 
		public String country {get;set;} 
		public String streetType {get;set;} 
		public String streetPrefix {get;set;} 
		public String streetName {get;set;} 
		public String streetNrFirst {get;set;} 
		public ComplementSummaryCustom complementSummary {get;set;} 
		public GeographicLocation geographicLocation {get;set;} 
		public String systemOriginator {get;set;} 
		public String database {get;set;} 
		public String streetCode {get;set;} 
		public String cnl {get;set;} 
		public String networkOwner {get;set;} 
		public String telephonicArea {get;set;} 
		

		public AliasedGeographicAddressWithoutPostcode(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'streetType') {
							streetType = parser.getText();
						} else if (text == 'streetPrefix') {
							streetPrefix = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetNrFirst') {
							streetNrFirst = parser.getText();
						} else if (text == 'complementSummary') {
							complementSummary = new ComplementSummaryCustom(parser);	
						} else if (text == 'geographicLocation') {
							geographicLocation = new GeographicLocation(parser);
						} else if (text == 'systemOriginator') {
							systemOriginator = parser.getText();
						} else if (text == 'database') {
							database = parser.getText();
						} else if (text == 'streetCode') {
							streetCode = parser.getText();
						} else if (text == 'cnl') {
							cnl = parser.getText();
						} else if (text == 'networkOwner') {
							networkOwner = parser.getText();
						} else if (text == 'telephonicArea') {
							telephonicArea = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AliasedGeographicAddressWithoutPostcode consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String validationResult {get;set;} 
	public List<AlternateGeographicAddress> alternateGeographicAddress {get;set;} 
	public String state {get;set;} 

	public ValidationResultTO(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'validationResult') {
						validationResult = parser.getText();
					} else if (text == 'alternateGeographicAddress') {
						alternateGeographicAddress = arrayOfAlternateGeographicAddress(parser);
					} else if (text == 'state') {
						state = parser.getText();
					} else {
						System.debug(LoggingLevel.WARN, 'ValidationResultTO consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}

	public class ComplementCustom{
		public String order {get;set;} 
		public String type {get;set;} 
		public String name {get;set;} 
		public String value {get;set;} 

		public ComplementCustom(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'order') {
							order = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ComplementCustom consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class GeographicLocation {
		public GeoJson geoJson {get;set;} 

		public GeographicLocation(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'geoJson') {
							geoJson = new GeoJson(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GeographicLocation consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AlternateGeographicAddress {
		public String country {get;set;} 
		public String city {get;set;} 
		public String stateOrProvince {get;set;}
		public String locality {get;set;}
		public String streetType {get;set;} 
		public String streetPrefix {get;set;} 
		public String streetName {get;set;} 
		public String streetNrFirst {get;set;}
		public ComplementSummary complementSummary {get;set;} 
		public GeographicLocation geographicLocation {get;set;} 
		public String systemOriginator {get;set;} 
		public String database {get;set;} 
		public String streetCode {get;set;} 
		public String cnl {get;set;} 
		public String networkOwner {get;set;} 
		public List<AliasedGeographicAddress> aliasedGeographicAddress {get;set;} 
		public String telephonicArea {get;set;} 
		
		public AlternateGeographicAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'country') {
							country = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'stateOrProvince') {
							stateOrProvince = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'streetType') {
							streetType = parser.getText();
						} else if (text == 'streetPrefix') {
							streetPrefix = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetNrFirst') {
							streetNrFirst = parser.getText();
						} else if (text == 'complementSummary') {
							complementSummary = new ComplementSummary(parser);
						} else if (text == 'geographicLocation') {
							geographicLocation = new GeographicLocation(parser);
						} else if (text == 'systemOriginator') {
							systemOriginator = parser.getText();
						} else if (text == 'database') {
							database = parser.getText();
						} else if (text == 'streetCode') {
							streetCode = parser.getText();
						} else if (text == 'cnl') {
							cnl = parser.getText();
						} else if (text == 'networkOwner') {
							networkOwner = parser.getText();
						} else if (text == 'aliasedGeographicAddress') {
							aliasedGeographicAddress = arrayOfAliasedGeographicAddress(parser);
						} else if (text == 'telephonicArea') {
							telephonicArea = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AlternateGeographicAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public class Complement {
		public String order {get;set;} 
		public String type {get;set;} 
		public String name {get;set;} 
		public String value {get;set;} 

		public Complement(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'order') {
							order = parser.getText();
						} else if (text == 'type') {
							type = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Complement consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}

	}

	public class GeoJson {
		public String type {get;set;} 
		public List<String> coordinates {get;set;} 

		public GeoJson(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type = parser.getText();
						} else if (text == 'coordinates') {
							coordinates = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'GeoJson consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AliasedGeographicAddress {
		public String id {get;set;} 
		public String country {get;set;} 
		public String city {get;set;} 
		public String stateOrProvince {get;set;}
		public String locality {get;set;}
		public String streetType {get;set;} 
		public String streetPrefix {get;set;} 
		public String streetName {get;set;} 
		public String streetNrFirst {get;set;}
		public String postcode {get;set;}  
		public ComplementSummary complementSummary {get;set;} 
		public GeographicLocationUncertain geographicLocation {get;set;} 
		public String systemOriginator {get;set;} 
		public String database {get;set;} 
		public String streetCode {get;set;} 
		public String cnl {get;set;} 
		public String networkOwner {get;set;} 
		public String telephonicArea {get;set;} 

		public AliasedGeographicAddress(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'city') {
							city = parser.getText();
						} else if (text == 'stateOrProvince') {
							stateOrProvince = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'streetType') {
							streetType = parser.getText();
						} else if (text == 'streetPrefix') {
							streetPrefix = parser.getText();
						} else if (text == 'streetName') {
							streetName = parser.getText();
						} else if (text == 'streetNrFirst') {
							streetNrFirst = parser.getText();
						} else if (text == 'complementSummary') {
							complementSummary = new ComplementSummary(parser);
						} else if (text == 'geographicLocation') {
							geographicLocation = new GeographicLocationUncertain(parser);
						} else if (text == 'systemOriginator') {
							systemOriginator = parser.getText();
						} else if (text == 'database') {
							database = parser.getText();
						} else if (text == 'streetCode') {
							streetCode = parser.getText();
						} else if (text == 'cnl') {
							cnl = parser.getText();
						} else if (text == 'networkOwner') {
							networkOwner = parser.getText();
						} else if (text == 'postcode') {
							postcode = parser.getText();
						}else {
							System.debug(LoggingLevel.WARN, 'AliasedGeographicAddress consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ComplementSummary {
		public List<Complement> complement {get;set;} 

		public ComplementSummary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'complement') {
							complement = arrayOfComplement(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'ComplementSummary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}

	public static ValidationResultTO parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new ValidationResultTO(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<AlternateGeographicAddress> arrayOfAlternateGeographicAddress(System.JSONParser p) {
        List<AlternateGeographicAddress> res = new List<AlternateGeographicAddress>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AlternateGeographicAddress(p));
        }
        return res;
    }

    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }

    private static List<AliasedGeographicAddressWithoutPostcode> arrayOfAliasedGeographicAddressWithoutPostcode(System.JSONParser p) {
        List<AliasedGeographicAddressWithoutPostcode> res = new List<AliasedGeographicAddressWithoutPostcode>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AliasedGeographicAddressWithoutPostcode(p));
        }
        return res;
    }

    private static List<Complement> arrayOfComplement(System.JSONParser p) {
        List<Complement> res = new List<Complement>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Complement(p));
        }
        return res;
    }

    private static List<ComplementCustom> arrayOfComplementCustom(System.JSONParser p) {
        List<ComplementCustom> res = new List<ComplementCustom>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new ComplementCustom(p));
        }
        return res;
    }

    private static List<AliasedGeographicAddress> arrayOfAliasedGeographicAddress(System.JSONParser p) {
        List<AliasedGeographicAddress> res = new List<AliasedGeographicAddress>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new AliasedGeographicAddress(p));
        }
        return res;
    }
}