//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

public class CustomerProblemManagementResponse {

	public class NoteDetails {
		public DateTime creationDate {get;set;} 
		public String characterSetCode {get;set;} 
		public String content {get;set;} 
		public String filename {get;set;} 
		public String mediaTypeCode {get;set;} 
		public OriginatingUser originatingUser {get;set;} 

		public NoteDetails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'creationDate') {
							creationDate = parser.getDateTimeValue();
						} else if (text == 'characterSetCode') {
							characterSetCode = parser.getText();
						} else if (text == 'content') {
							content = parser.getText();
						} else if (text == 'filename') {
							filename = parser.getText();
						} else if (text == 'mediaTypeCode') {
							mediaTypeCode = parser.getText();
						} else if (text == 'originatingUser') {
							originatingUser = new OriginatingUser(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'NoteDetails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Problems {
		public Boolean adminCreated {get;set;} 
		public String appointmentLastMilestoneDateX9 {get;set;} 
		public DateTime creationDate {get;set;} 
		public String externalSystemTicketId {get;set;} 
		public String problemId {get;set;} 
		public String lastModificationDate {get;set;} 
		public String name {get;set;} 
		public String priority {get;set;} 
		public String problemTypeLevel1 {get;set;} 
		public String problemTypeLevel2 {get;set;} 
		public String problemTypeLevel3 {get;set;} 
		public String protocolNumber {get;set;} 
		public String reference {get;set;} 
		public String severity {get;set;} 
		public String status {get;set;} 
		public AlternativeIndividual alternativeIndividual {get;set;} 
		public ReporterCustomer reporterCustomer {get;set;} 
		public ReporterIndividual reporterIndividual {get;set;} 
		public ReporterIndividual reporterOrganization {get;set;} 
		public ReporterIndividual reporterSite {get;set;} 
		public ReporterContact reporterContact {get;set;} 
		public List<FlexAttributes> flexAttributes {get;set;} 
		public List<NoteDetails> noteDetails {get;set;} 

		public Problems(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'adminCreated') {
							adminCreated = parser.getBooleanValue();
						} else if (text == 'appointmentLastMilestoneDateX9') {
							appointmentLastMilestoneDateX9 = parser.getText();
						} else if (text == 'creationDate') {
							creationDate = parser.getDateTimeValue();
						} else if (text == 'externalSystemTicketId') {
							externalSystemTicketId = parser.getText();
						} else if (text == 'problemId') {
							problemId = parser.getText();
						} else if (text == 'lastModificationDate') {
							lastModificationDate = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'priority') {
							priority = parser.getText();
						} else if (text == 'problemTypeLevel1') {
							problemTypeLevel1 = parser.getText();
						} else if (text == 'problemTypeLevel2') {
							problemTypeLevel2 = parser.getText();
						} else if (text == 'problemTypeLevel3') {
							problemTypeLevel3 = parser.getText();
						} else if (text == 'protocolNumber') {
							protocolNumber = parser.getText();
						} else if (text == 'reference') {
							reference = parser.getText();
						} else if (text == 'severity') {
							severity = parser.getText();
						} else if (text == 'status') {
							status = parser.getText();
						} else if (text == 'alternativeIndividual') {
							alternativeIndividual = new AlternativeIndividual(parser);
						} else if (text == 'reporterCustomer') {
							reporterCustomer = new ReporterCustomer(parser);
						} else if (text == 'reporterIndividual') {
							reporterIndividual = new ReporterIndividual(parser);
						} else if (text == 'reporterOrganization') {
							reporterOrganization = new ReporterIndividual(parser);
						} else if (text == 'reporterSite') {
							reporterSite = new ReporterIndividual(parser);
						} else if (text == 'reporterContact') {
							reporterContact = new ReporterContact(parser);
						} else if (text == 'flexAttributes') {
							flexAttributes = arrayOfFlexAttributes(parser);
						} else if (text == 'noteDetails') {
							noteDetails = arrayOfNoteDetails(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Problems consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ReporterCustomer {
		public String externalId {get;set;} 

		public ReporterCustomer(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'externalId') {
							externalId = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ReporterCustomer consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class FlexAttributes {
		public String name {get;set;} 
		public String value {get;set;} 

		public FlexAttributes(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'FlexAttributes consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Customers {
		public String alias {get;set;} 
		public String externalId {get;set;} 

		public Customers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'alias') {
							alias = parser.getText();
						} else if (text == 'externalId') {
							externalId = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Customers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class AlternativeIndividual {
		public String formattedName {get;set;} 

		public AlternativeIndividual(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'formattedName') {
							formattedName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'AlternativeIndividual consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ReporterIndividual {
		public String id {get;set;} 

		public ReporterIndividual(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ReporterIndividual consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class ReporterContact {
		public String phoneNumber {get;set;} 

		public ReporterContact(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'phoneNumber') {
							phoneNumber = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'ReporterContact consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Individuals {
		public String id {get;set;} 
		public String externalId {get;set;} 
		public String familyName {get;set;} 
		public String formattedName {get;set;} 
		public String givenName {get;set;} 

		public Individuals(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'externalId') {
							externalId = parser.getText();
						} else if (text == 'familyName') {
							familyName = parser.getText();
						} else if (text == 'formattedName') {
							formattedName = parser.getText();
						} else if (text == 'givenName') {
							givenName = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Individuals consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class OriginatingUser {
		public String id {get;set;} 
		public String name {get;set;} 

		public OriginatingUser(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'OriginatingUser consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public List<Problems> problems {get;set;} 
	public Boolean moreRows {get;set;} 
	public List<Customers> customers {get;set;} 
	public List<Individuals> individuals {get;set;} 
	public List<OriginatingUser> organizations {get;set;} 
	public List<OriginatingUser> geographicSites {get;set;} 

	public CustomerProblemManagementResponse(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'problems') {
						problems = arrayOfProblems(parser);
					} else if (text == 'moreRows') {
						moreRows = parser.getBooleanValue();
					} else if (text == 'customers') {
						customers = arrayOfCustomers(parser);
					} else if (text == 'individuals') {
						individuals = arrayOfIndividuals(parser);
					} else if (text == 'organizations') {
						organizations = arrayOfOriginatingUser(parser);
					} else if (text == 'geographicSites') {
						geographicSites = arrayOfOriginatingUser(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'CustomerProblemManagementResponse consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	
	public static CustomerProblemManagementResponse parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new CustomerProblemManagementResponse(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	








    private static List<OriginatingUser> arrayOfOriginatingUser(System.JSONParser p) {
        List<OriginatingUser> res = new List<OriginatingUser>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new OriginatingUser(p));
        }
        return res;
    }


    private static List<Customers> arrayOfCustomers(System.JSONParser p) {
        List<Customers> res = new List<Customers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Customers(p));
        }
        return res;
    }






    private static List<Problems> arrayOfProblems(System.JSONParser p) {
        List<Problems> res = new List<Problems>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Problems(p));
        }
        return res;
    }




    private static List<FlexAttributes> arrayOfFlexAttributes(System.JSONParser p) {
        List<FlexAttributes> res = new List<FlexAttributes>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new FlexAttributes(p));
        }
        return res;
    }


    private static List<NoteDetails> arrayOfNoteDetails(System.JSONParser p) {
        List<NoteDetails> res = new List<NoteDetails>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new NoteDetails(p));
        }
        return res;
    }



    private static List<Individuals> arrayOfIndividuals(System.JSONParser p) {
        List<Individuals> res = new List<Individuals>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Individuals(p));
        }
        return res;
    }
}