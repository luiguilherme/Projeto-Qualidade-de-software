//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//

@IsTest
public class ValidationResultTOTest {
	
	// This test method should give 100% coverage
	static testMethod void testParse() {
		String json = '{\"validationResult\":\"SUCCESS\",\"alternateGeographicAddress\":[{\"country\":\"BR\",\"city\":\"SAO PAULO\",\"stateOrProvince\":\"SP\",\"streetType\":\"AVENIDA\",\"streetPrefix\":\"ENGENHEIRO\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[]},\"geographicLocation\":{\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.693886\",\"-23.608109\"]}},\"systemOriginator\":\"SAGRE\",\"database\":\"SP_SAO_PAULO\",\"streetCode\":\"58058\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO2\",\"aliasedGeographicAddress\":[{\"id\":\"SAGRE:SP_SAO_PAULO:11000:58058:1376:::::::-46.6938871:-23.6081077:200:20210413194748\",\"country\":\"BR\",\"city\":\"SAO PAULO\",\"stateOrProvince\":\"SP\",\"streetType\":\"AVENIDA\",\"streetPrefix\":\"ENGENHEIRO\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[]},\"geographicLocation\":{\"uncertain\":\"86.46\",\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.693886\",\"-23.608109\"]}},\"systemOriginator\":\"SAGRE\",\"database\":\"SP_SAO_PAULO\",\"streetCode\":\"58058\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO2\"}]},{\"country\":\"BR\",\"streetType\":\"AVENIDA\",\"streetPrefix\":\"ENGENHEIRO\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[{\"order\":\"1\",\"type\":\"HORIZONTAL\",\"name\":\"EDI\",\"value\":\"ECO BERRINI 1\"}]},\"geographicLocation\":{\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.69426\",\"-23.608473\"]}},\"systemOriginator\":\"OSP\",\"database\":\"TLF_BR_SPO_VM\",\"streetCode\":\"159980\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO1\",\"telephonicArea\":\"AT\",\"aliasedGeographicAddress\":[{\"id\":\"OSP:TLF_BR_SPO_VM:11000:159980:1376:EDI:ECO BERRINI 1:::::-46.6942603:-23.6084719:200:20210413194757\",\"country\":\"BR\",\"streetType\":\"Av.\",\"streetPrefix\":\"ENG.\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[{\"order\":\"1\",\"type\":\"HORIZONTAL\",\"name\":\"EDI\",\"value\":\"ECO BERRINI 1\"}]},\"geographicLocation\":{\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.69426\",\"-23.608473\"]}},\"systemOriginator\":\"OSP\",\"database\":\"TLF_BR_SPO_VM\",\"streetCode\":\"159980\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO1\",\"telephonicArea\":\"AT\"}]},{\"country\":\"BR\",\"streetType\":\"AVENIDA\",\"streetPrefix\":\"ENGENHEIRO\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[{\"order\":\"1\",\"type\":\"HORIZONTAL\",\"name\":\"EDI\",\"value\":\"ECO BERRINI 2\"}]},\"geographicLocation\":{\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.69426\",\"-23.608473\"]}},\"systemOriginator\":\"OSP\",\"database\":\"TLF_BR_SPO_VM\",\"streetCode\":\"159980\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO1\",\"telephonicArea\":\"AT\",\"aliasedGeographicAddress\":[{\"id\":\"OSP:TLF_BR_SPO_VM:11000:159980:1376:EDI:ECO BERRINI 2:::::-46.6942603:-23.6084719:200:20210413194757\",\"country\":\"BR\",\"streetType\":\"Av.\",\"streetPrefix\":\"ENG.\",\"streetName\":\"LUIZ CARLOS BERRINI\",\"streetNrFirst\":\"1376\",\"complementSummary\":{\"complement\":[{\"order\":\"1\",\"type\":\"HORIZONTAL\",\"name\":\"EDI\",\"value\":\"ECO BERRINI 2\"}]},\"geographicLocation\":{\"geoJson\":{\"type\":\"Point\",\"coordinates\":[\"-46.69426\",\"-23.608473\"]}},\"systemOriginator\":\"OSP\",\"database\":\"TLF_BR_SPO_VM\",\"streetCode\":\"159980\",\"cnl\":\"11000\",\"networkOwner\":\"VIVO1\",\"telephonicArea\":\"AT\"}]}],\"state\":\"DONE\"}';
		ValidationResultTO r = ValidationResultTO.parse(json);
		System.assert(r != null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.GeographicLocationUncertain objGeographicLocationUncertain = new ValidationResultTO.GeographicLocationUncertain(System.JSON.createParser(json));
		System.assert(objGeographicLocationUncertain != null);
		System.assert(objGeographicLocationUncertain.uncertain == null);
		System.assert(objGeographicLocationUncertain.geoJson == null);

				json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.AliasedGeographicAddressWithoutPostcode objAliasedGeographicAddressWithoutPostcode = new ValidationResultTO.AliasedGeographicAddressWithoutPostcode(System.JSON.createParser(json));
		System.assert(objAliasedGeographicAddressWithoutPostcode != null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.id == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.country == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.streetType == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.streetPrefix == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.streetName == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.streetNrFirst == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.geographicLocation == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.systemOriginator == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.database == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.streetCode == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.cnl == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.networkOwner == null);
		System.assert(objAliasedGeographicAddressWithoutPostcode.telephonicArea == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO objValidationResultTO = new ValidationResultTO(System.JSON.createParser(json));
		System.assert(objValidationResultTO != null);
		System.assert(objValidationResultTO.validationResult == null);
		System.assert(objValidationResultTO.alternateGeographicAddress == null);
		System.assert(objValidationResultTO.state == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.GeographicLocation objGeographicLocation = new ValidationResultTO.GeographicLocation(System.JSON.createParser(json));
		System.assert(objGeographicLocation != null);
		System.assert(objGeographicLocation.geoJson == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.AlternateGeographicAddress objAlternateGeographicAddress = new ValidationResultTO.AlternateGeographicAddress(System.JSON.createParser(json));
		System.assert(objAlternateGeographicAddress != null);
		System.assert(objAlternateGeographicAddress.country == null);
		System.assert(objAlternateGeographicAddress.city == null);
		System.assert(objAlternateGeographicAddress.stateOrProvince == null);
		System.assert(objAlternateGeographicAddress.streetType == null);
		System.assert(objAlternateGeographicAddress.streetPrefix == null);
		System.assert(objAlternateGeographicAddress.streetName == null);
		System.assert(objAlternateGeographicAddress.streetNrFirst == null);
		System.assert(objAlternateGeographicAddress.geographicLocation == null);
		System.assert(objAlternateGeographicAddress.systemOriginator == null);
		System.assert(objAlternateGeographicAddress.database == null);
		System.assert(objAlternateGeographicAddress.streetCode == null);
		System.assert(objAlternateGeographicAddress.cnl == null);
		System.assert(objAlternateGeographicAddress.networkOwner == null);
		System.assert(objAlternateGeographicAddress.aliasedGeographicAddress == null);
		System.assert(objAlternateGeographicAddress.telephonicArea == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.GeoJson objGeoJson = new ValidationResultTO.GeoJson(System.JSON.createParser(json));
		System.assert(objGeoJson != null);
		System.assert(objGeoJson.type == null);
		System.assert(objGeoJson.coordinates == null);

		json = '{\"TestAMissingObject\": { \"TestAMissingArray\": [ { \"TestAMissingProperty\": \"Some Value\" } ] } }';
		ValidationResultTO.AliasedGeographicAddress objAliasedGeographicAddress = new ValidationResultTO.AliasedGeographicAddress(System.JSON.createParser(json));
		System.assert(objAliasedGeographicAddress != null);
		System.assert(objAliasedGeographicAddress.id == null);
		System.assert(objAliasedGeographicAddress.country == null);
		System.assert(objAliasedGeographicAddress.city == null);
		System.assert(objAliasedGeographicAddress.stateOrProvince == null);
		System.assert(objAliasedGeographicAddress.streetType == null);
		System.assert(objAliasedGeographicAddress.streetPrefix == null);
		System.assert(objAliasedGeographicAddress.streetName == null);
		System.assert(objAliasedGeographicAddress.streetNrFirst == null);
		System.assert(objAliasedGeographicAddress.geographicLocation == null);
		System.assert(objAliasedGeographicAddress.systemOriginator == null);
		System.assert(objAliasedGeographicAddress.database == null);
		System.assert(objAliasedGeographicAddress.streetCode == null);
		System.assert(objAliasedGeographicAddress.cnl == null);
		System.assert(objAliasedGeographicAddress.networkOwner == null);

	}
}