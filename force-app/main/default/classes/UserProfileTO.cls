//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class UserProfileTO {

	public List<Identities> identities {get;set;} 
	public String id {get;set;} 
	public String name {get;set;} 
	public Id_document id_document {get;set;} 
	public List<Contact_media> contact_media {get;set;} 

	public UserProfileTO(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'identities') {
						identities = arrayOfIdentities(parser);
					} else if (text == 'id') {
						id = parser.getText();
					} else if (text == 'name') {
						name = parser.getText();
					} else if (text == 'id_document') {
						id_document = new Id_document(parser);
					} else if (text == 'contact_media') {
						contact_media = arrayOfContact_media(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'UserProfileTO consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Id_document {
		public String value {get;set;} 
		public String country {get;set;} 
		public String type_Z {get;set;} // in json: type

		public Id_document(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'value') {
							value = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Id_document consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Contact_media {
		public String type_Z {get;set;} // in json: type
		public String value {get;set;} 

		public Contact_media(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'value') {
							value = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Contact_media consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Identities {
		public List<String> services {get;set;} 
		public List<String> roles {get;set;} 
		public String id {get;set;} 
		public String type_Z {get;set;} // in json: type
		public List<String> group_ids {get;set;} 

		public Identities(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'services') {
							services = arrayOfString(parser);
						} else if (text == 'roles') {
							roles = arrayOfString(parser);
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'group_ids') {
							group_ids = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Identities consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<UserProfileTO> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfUserProfileTO(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	
    private static List<Contact_media> arrayOfContact_media(System.JSONParser p) {
        List<Contact_media> res = new List<Contact_media>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Contact_media(p));
        }
        return res;
    }





    private static List<UserProfileTO> arrayOfUserProfileTO(System.JSONParser p) {
        List<UserProfileTO> res = new List<UserProfileTO>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new UserProfileTO(p));
        }
        return res;
    }




    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }



    private static List<Identities> arrayOfIdentities(System.JSONParser p) {
        List<Identities> res = new List<Identities>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Identities(p));
        }
        return res;
    }



}